var k=Object.defineProperty;var f=(o,e,s)=>e in o?k(o,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):o[e]=s;var r=(o,e,s)=>(f(o,typeof e!="symbol"?e+"":e,s),s);var h=(o,e,s)=>new Promise((t,a)=>{var c=n=>{try{l(s.next(n))}catch(p){a(p)}},i=n=>{try{l(s.throw(n))}catch(p){a(p)}},l=n=>n.done?t(n.value):Promise.resolve(n.value).then(c,i);l((s=s.apply(o,e)).next())});import{d as g,o as w,c as _,i as m,a as v,b as M}from"./vendor-cd0fff50.js";class j{constructor(e,s,t){r(this,"id");r(this,"parameters");r(this,"taskName");this.id=e,this.parameters=t,this.taskName=s}}class T{constructor(e){r(this,"globalTaskID",0);r(this,"resolvers",new Map);r(this,"rejectors",new Map);r(this,"worker");this.worker=e,this.worker.onmessage=s=>{const{id:t,error:a,payload:c,success:i}=s.data;i&&this.resolvers.has(t)?this.resolvers.get(t)(c):a&&this.rejectors.has(t)?this.rejectors.get(t)(c):console.error(`Unknown response from background service "${this.constructor.name}"`),this.resolvers.delete(t),this.rejectors.delete(t)}}run(e,...s){const t=new j(++this.globalTaskID,e,s);return new Promise((a,c)=>{this.resolvers.set(t.id,a),this.rejectors.set(t.id,c),this.worker.postMessage(t)})}}function u(){return new Worker("/static/MyService.background.8f154109.js",{type:"module"})}console.log(u);class y extends T{constructor(){super(new u)}fetchTodos(){return this.run("fetchTodos")}fetchPosts(){return this.run("fetchPosts")}}const b=g({setup(o){const e=m("MyService");return w(()=>h(this,null,function*(){const s=yield e==null?void 0:e.fetchTodos(),t=yield e==null?void 0:e.fetchPosts();console.log("todos: ",s),console.log("posts: ",t)})),(s,t)=>(v(),_("h1",null,"This is the Vue app"))}}),d=M(b);d.provide("MyService",new y);d.mount("#app");
