var p=Object.defineProperty;var k=(r,c,e)=>c in r?p(r,c,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[c]=e;var o=(r,c,e)=>(k(r,typeof c!="symbol"?c+"":c,e),e);var d=(r,c,e)=>new Promise((u,s)=>{var a=t=>{try{i(e.next(t))}catch(h){s(h)}},n=t=>{try{i(e.throw(t))}catch(h){s(h)}},i=t=>t.done?u(t.value):Promise.resolve(t.value).then(a,n);i((e=e.apply(r,c)).next())});(function(){"use strict";class r{constructor(a){o(this,"error",!1);o(this,"id");o(this,"payload",null);o(this,"success",!1);this.id=a}pass(a){this.error=!1,this.payload=a,this.success=!0}fail(a){this.error=!0,this.payload=a,this.success=!1}}class c extends Error{constructor(a,n){super(`Background task "${a}" not found in "${n}" controller`);this.name="BackgroundTask Error"}}class e{constructor(a){o(this,"service");this.service=a,self.addEventListener("message",n=>d(this,null,function*(){const{id:i,taskName:t,parameters:h}=n.data,l=new r(i);t in this.service&&typeof this.service[t]=="function"?yield this.service[t](...h).then(f=>l.pass(f)).catch(f=>l.fail(f)):l.fail(new c(t,this.constructor.name)),self.postMessage(l)}))}}const u={fetchTodos(){return d(this,null,function*(){return yield fetch("https://jsonplaceholder.typicode.com/todos").then(s=>s.json()).catch(s=>s)})},fetchPosts(){return d(this,null,function*(){return yield fetch("https://jsonplaceholder.typicode.com/posts/1").then(s=>s.json()).catch(s=>s)})}};new e(u)})();
